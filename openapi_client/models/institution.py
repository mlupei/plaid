# coding: utf-8

"""
    Plaid Institutions API

    API for searching Plaid institutions.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Institution(BaseModel):
    """
    Institution
    """ # noqa: E501
    institution_id: Optional[StrictStr] = Field(default=None, description="The institution's ID in Plaid.")
    name: Optional[StrictStr] = Field(default=None, description="The institution's name.")
    country_codes: Optional[List[StrictStr]] = Field(default=None, description="The country codes where the institution operates.")
    url: Optional[StrictStr] = Field(default=None, description="The institution's official website URL.")
    logo: Optional[StrictStr] = Field(default=None, description="A URL to the institution's logo.")
    primary_color: Optional[StrictStr] = Field(default=None, description="The primary color of the institution in hexadecimal.")
    products: Optional[List[StrictStr]] = Field(default=None, description="The Plaid products that the institution supports.")
    __properties: ClassVar[List[str]] = ["institution_id", "name", "country_codes", "url", "logo", "primary_color", "products"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Institution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Institution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "institution_id": obj.get("institution_id"),
            "name": obj.get("name"),
            "country_codes": obj.get("country_codes"),
            "url": obj.get("url"),
            "logo": obj.get("logo"),
            "primary_color": obj.get("primary_color"),
            "products": obj.get("products")
        })
        return _obj


